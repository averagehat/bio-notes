========
#Testing
========
http://www.rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf
The first step when you are debugging your code is to write a new test pinpointing the bug. While it is not always possible to do, those bug catching tests are among the most valuable pieces of code in your project.

If you are in the middle of a development session and have to interrupt your work, it is a good idea to write a broken unit test about what you want to develop next. When coming back to work, you will have a pointer to where you were and get back on track faster.

the testing code will be read as much as or even more than the running code. A unit test whose purpose is unclear is not very helpful in this case.

functional testing (black-box) is particularly useful when you can trace the call stack (and find what screwed up). Maybe less good for (mutable) objects

Functional testing tests a slice of functionality of the whole system
"verifies a program by checking it against ... design document(s) or specification(s)

Testing for this being non-null on entry to a method is, by the way, not a tautological test — and can be very informative. However, as with most unit tests , it’s better to make th is an assertion than to pepper your test framework with such checks.  More on that below testing. One is to use it as a learning tool: to learn more about the program and how it works.  This is why it works to walk away from the terminal for a while

System tests drop you almost im mediately into this position of reflection. You still ne ed the detailed information, of course, and that’s where debugging comes in.  Debugging is the use of tools and devices to help isol ate a bug. Debugging is not testing. It is ad-hoc and done on a bug-by-bug basis. Unit tests can be a useful debugging tool. In my own experience I have found that a combination of many tools wo rk best, and that the most effective are data value traps, and access to the global context including all data values an d the occasional stack trace

 debugging isn’t what you do sitting in front of your program with a debugger; it’s what you do leaning bac k in your chair starin g at the ceiling, or discussing the bug with the team

Regression tests should be system-level Use unit tests for key algorithms Turn unit tests into assertions. 

In your example, if x is a value set via a user interface or from an external source, an exception is best.

If x is only set by your own code in the same program, go with an assertion.

Fuzz testing; Behave; Robot Framework; System tests
BDD 

:!cat %
git ls-files


__main__ should do minimal to allow better, more accurate coverage of functionality via unit tests
main() should return an exit value.
if __name__ == "__main__": sys.exit(main())  


Create pybot functions to handle/compare fastq/fasta/bam(?) files (order of a fastq file should not matter)
look at how biopython and PySam (etc . . . ) test their code


what existing field -- or project -- does the kind of file transformations present in bioinformatics? So I can figure out testing best practices.
i.e. R, pandas, 
html parted parts. When testing the complete application, it is an advantage to use well-tested parts. It is the classic bottom-up approach of composing functionality from simpler parts. In the example above, if the pool functionality has been unit tested, I can concentrate on making sure it works well with the rest of the system when testing the complete system. If it was not unit tested, I might still find problems with how the pool works, but it could take more effort to find where in the code the problem is, since it could be anywhere.\


In my experience, unit tests are most valuable when you use them for algorithmic logic. They are not particularly useful for code that is more coordinating in its nature. Coordinating code often requires a lot of (mocked) context for unit testing, but the tests themselves are not very interesting. This type of code does not benefit a great deal from unit testing, and is instead better tested in integration testing. For more on the different types of code, see Selective Unit Testing – Costs and Benefits.


Sometimes the complete feature you are working on may take a while to finish, or it requires other parts to be done first. Thus it is not possible to integration test it at each step of the way. With unit tests, you get feedback immediately if you make a mistake. 




In my experience, if your code is not obvious at a single glance – so working out its exact behaviour would take time and careful thought – then additional design and verification assistance (e.g., through unit testing) is essential to be sure that all your cases are handled properly. For example, if you’re coding a system of business rules or parsing a complex hierarchical string format, there will be too many possible code paths to check at a glance. In scenarios like these, unit tests are extremely helpful and valuable.

Conversely, if your code is basically obvious – so at a glance you can see exactly what it does – then additional design and verification (e.g., through unit testing) yields extremely minimal benefit, if any. For example, if you’re writing a method that gets the current date and the amount of free disk space, and then passes them both to a logging service, the source code listing says everything you need to say about that design. What would a unit test add here, given that you’d be mocking out the clock and disk space provider anyway?

Click
Bats

pandas CI folder

Seperate out all of the API-dependent (and I/O) pieces, so that the algorithmic part is simply manipulation of DataFrames. er?

